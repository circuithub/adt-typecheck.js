/*
 * adt-typecheck.js - Typecheck your JavaScript data structures
 * adt-typecheck.js is free, public domain software (http://creativecommons.org/publicdomain/zero/1.0/)
 * Originally created by Rehno Lindeque of http://www.mischievousmeerkat.com
 * Use it in combination with https://github.com/rehno-lindeque/adt.js
 */
var adt = adt || (typeof require === 'function'? require('adt.js') : {});
(function() {
"use strict";
adt.JSON={},adt.JSON.tags=["Number","String","Boolean","Array","Object","Null"],adt.JSON.constructors=adt.apply(null,adt.JSON.tags),adt.Class={},adt.Class.tags=["Arguments","Array","Boolean","Date","Error","Function","JSON","Math","Number","Object","RegExp","String","Null","Undefined"],adt.Class.constructors=adt.apply(null,adt.Class.tags);var classCons=adt.Class.constructors,typeError=function(e,t,n){return n?{key:n,expected:e,received:t}:{expected:e,received:t}},typeErrorF=function(e,t){return function(){return[typeError(e,this._tag,t)]}},isClass=function(e){var t={_:!1};return t[e]=function(t){return this._datatype===e},adt(t)},isObjectClass=isClass("Object"),isArgumentsClass=isClass("Arguments"),typecheck=function(e,t){if(e==null)throw"Invalid type definition: "+e;return adt({Object:function(e){if(arguments.length>1)throw"Multiple arguments to Object type definition is not yet supported.";return isObjectClass(e)?adt({Object:function(n){var r,i,s=[];for(r in e)i=(t?t+".":"<Object>.")+r,typeof n[r]=="undefined"&&e[r]._tag!=="Undefined"?s.push(typeError(adt.serialize(e[r]),void 0,i)):s=s.concat(typecheck(e[r],i)(n[r]));return s},_:typeErrorF("Object",t)}):this._(classCons.Object(e))},Arguments:function(e){if(arguments.length>1)throw"Cannot pass multiple arguments to Arguments type definition.";return Array.isArray(e)?adt({Arguments:function(n){var r,i,s,o=[];for(r=0;r<e.length;++r)i=e[r],s=(t?t:"<Arguments>")+"["+String(r)+"]",o=o.concat(typecheck(i,s)(n[r]));return o},_:typeErrorF("Arguments",t)}):this._(classCons.Arguments(e))},Array:function(e){if(arguments.length>1)throw"Cannot pass multiple arguments to Array type definition.";return Array.isArray(e)?adt({Array:function(n){var r,i,s,o=[];for(r=0;r<e.length;++r)i=e[r],s=(t?t:"<Array>")+"["+String(r)+"]",o=o.concat(typecheck(i,s)(n[r]));return o},_:typeErrorF("Arguments",t)}):this._(classCons.Array(e))},_:function(){var e=this._tag,n={_:typeErrorF(e,t)};return n[e]=[],adt(n)}})(e)};adt.typecheck=function(e){return typecheck(e.call(adt.Class.constructors))},adt.typecheck.show=function(e){return Array.isArray(e)?e.map(adt.typecheck.show):"Expected "+(typeof e.key=="string"?e.key+" of type ":"type ")+"'"+e.expected+"', but received '"+e.received+"'"};  // Export typecheck to a CommonJS module if exports is available
  if (typeof module !== "undefined" && module !== null)
    module.exports = adt.typecheck;
})();
